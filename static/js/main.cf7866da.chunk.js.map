{"version":3,"sources":["component/Navbar.js","component/TextForm.js","component/About.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","style","cursor","onClick","toggleMode","htmlFor","defaultProps","TextForm","useState","text","setText","count","setCount","color","heading","value","backgroundColor","onChange","event","target","rows","disabled","length","newText","toLocaleUpperCase","showAlert","toLowerCase","vowels","i","charAt","navigator","clipboard","writeText","split","filter","element","About","myStyle","Alert","height","alert","typ","role","word","lower","toUpperCase","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cf7866da.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <div className=\"d-flex\">\r\n                        <button className=\"bg-primary rounded mx-2\" onClick={()=>{ props.toggleMode('primary')}} style={{height:\"30px\", width: \"30px\"}}>\r\n\r\n                        </button>\r\n                    </div> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'} `} >\r\n                        <input className=\"form-check-input\" style={{ cursor: \"pointer\" }} type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n                        <label className=\"form-check-labe\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired, // to make it compulasary\r\n    aboutText: PropTypes.string,\r\n} // set default variable type for props\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Hey wassup\",\r\n    aboutText: \"Tell me about\"\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  const [count, setCount] = useState(0);\r\n  const handleUpClick = () => {\r\n    if (text !== \"\") {\r\n      let newText = text.toLocaleUpperCase();\r\n      setText(newText);\r\n      props.showAlert(\"Text converted to Upper case\", \"success\");\r\n    } else {\r\n      props.showAlert(\"Please write something to convert\", \"danger\");\r\n    }\r\n  };\r\n  const handleLoClick = () => {\r\n    if (text !== \"\") {\r\n      let newText = text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"Text converted to lower case\", \"success\");\r\n    } else {\r\n      props.showAlert(\"Please write something to convert\", \"danger\");\r\n    }\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const clearText = () => {\r\n    if (text !== \"\") {\r\n      setText(\"\");\r\n      setCount(\"\");\r\n      props.showAlert(\"Text field is empty\", \"success\");\r\n    } else {\r\n      props.showAlert(\"Text field is already empty\", \"danger\");\r\n    }\r\n  };\r\n  const countVowels = () => {\r\n    if (text !== \"\") {\r\n      let vowels = 0;\r\n      for (let i = 0; i < text.length; i++) {\r\n        if (\r\n          text.charAt(i) === \"a\" ||\r\n          text.charAt(i) === \"e\" ||\r\n          text.charAt(i) === \"i\" ||\r\n          text.charAt(i) === \"o\" ||\r\n          text.charAt(i) === \"u\"\r\n        ) {\r\n          vowels = vowels + 1;\r\n        }\r\n        if (\r\n          text.charAt(i) === \"A\" ||\r\n          text.charAt(i) === \"E\" ||\r\n          text.charAt(i) === \"I\" ||\r\n          text.charAt(i) === \"O\" ||\r\n          text.charAt(i) === \"U\"\r\n        ) {\r\n          vowels = vowels + 1;\r\n        }\r\n      }\r\n      setCount(vowels);\r\n    } else {\r\n      props.showAlert(\"Please write something to count\", \"danger\");\r\n    }\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    // let text = document.getElementById(\"myBox\");\r\n    if (text.value !== \"\") {\r\n      // text.select(); // highlight text (with blue background on clicking copy button)\r\n      navigator.clipboard.writeText(text); // navigator api does not need text to selsct first then copy as above\r\n      props.showAlert(\"Text copied to clipboard\", \"success\");\r\n      // document.getSelection().removeAllRanges(); // to remove text highlight(background blue) on clicking copy button.\r\n    } else {\r\n      props.showAlert(\"Nothing to copy in the textbox\", \"danger\");\r\n    }\r\n    // text.select();\r\n  };\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"#fff\" }}\r\n      >\r\n        <h2 className =\"mb-3\">{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"#fff\" : \"#201f1f\",\r\n              color: props.mode === \"light\" ? \"black\" : \"#fff\",\r\n            }}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button disabled ={text.length===0} className=\"btn btn-primary my-1 mx-2\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button disabled ={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button disabled ={text.length===0} className=\"btn btn-primary my-1\" onClick={clearText}>\r\n          Clear Text\r\n        </button>\r\n        <button disabled ={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={countVowels}>\r\n          Count Vowels\r\n        </button>\r\n        <button disabled ={text.length===0} className=\"btn btn-primary my-1\" onClick={handleCopy}>\r\n          Copy\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"#fff\" }}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {\" \"}\r\n          <b> {text.split(/\\s+/).filter((element)=>{return element.length !==0}).length} </b>words and <b> {text.length} </b>{\" \"}\r\n          character{\" \"}\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          <b> {0.008 * text.length} </b>Minutes to read{\" \"}\r\n        </p>\r\n        <p>\r\n          <b>{count}</b> Vowels{\" \"}\r\n        </p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length > 0 ? text : \"Nothing to preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function About(props) {\r\n    // const [myStyle, setmyStyle] = useState({\r\n    //     color: \"black\",\r\n    //     backgroundColor: \"#fff\",\r\n    // });\r\n\r\n    let myStyle ={\r\n        color : props.mode === \"dark\" ?  \"white\" : \"black\",\r\n        backgroundColor : props.mode === \"dark\" ? \"#212529\" : \"white\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"container py-2\">\r\n            <h1 className=\"m-2\" style={{color : props.mode === 'dark' ? 'white' : 'black' }}>About Us</h1>\r\n            <div className=\"accordion mx-2\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button\r\n                            className=\"accordion-button\"\r\n                            type=\"button\"\r\n                            style={myStyle}\r\n                            data-bs-toggle=\"collapse\"\r\n                            data-bs-target=\"#collapseOne\"\r\n                            aria-expanded=\"true\"\r\n                            aria-controls=\"collapseOne\"\r\n                        >\r\n                            <strong> Accordion Item #1 </strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div\r\n                        id=\"collapseOne\"\r\n                        className=\"accordion-collapse collapse show\"\r\n                        aria-labelledby=\"headingOne\"\r\n                        data-bs-parent=\"#accordionExample\"\r\n                    >\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            This is the first item's accordion body. It is\r\n                            shown by default, until the collapse plugin adds the appropriate\r\n                            classNamees that we use to style each element. These classNamees\r\n                            control the overall appearance, as well as the showing and hiding\r\n                            via CSS transitions. You can modify any of this with custom CSS or\r\n                            overriding our default variables. It's also worth noting that just\r\n                            about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button\r\n                            className=\"accordion-button collapsed\"\r\n                            type=\"button\"\r\n                            style={myStyle}\r\n                            data-bs-toggle=\"collapse\"\r\n                            data-bs-target=\"#collapseTwo\"\r\n                            aria-expanded=\"false\"\r\n                            aria-controls=\"collapseTwo\"\r\n                        >\r\n                            <strong> Accordion Item #2 </strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div\r\n                        id=\"collapseTwo\"\r\n                        className=\"accordion-collapse collapse\"\r\n                        aria-labelledby=\"headingTwo\"\r\n                        data-bs-parent=\"#accordionExample\"\r\n                    >\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            This is the second item's accordion body. It is\r\n                            hidden by default, until the collapse plugin adds the appropriate\r\n                            classNamees that we use to style each element. These classNamees\r\n                            control the overall appearance, as well as the showing and hiding\r\n                            via CSS transitions. You can modify any of this with custom CSS or\r\n                            overriding our default variables. It's also worth noting that just\r\n                            about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button\r\n                            className=\"accordion-button collapsed\"\r\n                            type=\"button\"\r\n                            style={myStyle}\r\n                            data-bs-toggle=\"collapse\"\r\n                            data-bs-target=\"#collapseThree\"\r\n                            aria-expanded=\"false\"\r\n                            aria-controls=\"collapseThree\"\r\n                        >\r\n                            <strong> Accordion Item #3 </strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div\r\n                        id=\"collapseThree\"\r\n                        className=\"accordion-collapse collapse\"\r\n                        aria-labelledby=\"headingThree\"\r\n                        data-bs-parent=\"#accordionExample\"\r\n                    >\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            This is the third item's accordion body. It is\r\n                            hidden by default, until the collapse plugin adds the appropriate\r\n                            classNamees that we use to style each element. These classNamees\r\n                            control the overall appearance, as well as the showing and hiding\r\n                            via CSS transitions. You can modify any of this with custom CSS or\r\n                            overriding our default variables. It's also worth noting that just\r\n                            about any HTML can go within the <code>.accordion-body</code>,\r\n                            though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport const Alert = (props) => {\r\n    const capitalize= (word)=>{\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style ={{height: \"50px\"}}>\r\n            {props.alert  && <div className={`alert alert-${props.alert.typ} alert-dismissible fade show`} role=\"alert\">\r\n               <strong>{capitalize(props.alert.typ)}</strong>: {props.alert.msg}\r\n            </div>}\r\n        </div>\r\n        \r\n    )\r\n}\r\n","import Navbar from \"./component/Navbar\";\nimport \"./App.css\";\nimport TextForm from \"./component/TextForm\";\nimport About from \"./component/About\";\nimport { useState } from \"react\";\nimport { Alert } from \"./component/Alert\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null); //alert object\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      typ: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1800);\n  };\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"#fff\";\n      showAlert(\"Light mode has been enabled\", \"info\");\n      // document.title = \"TExt-Utils | Mordern Txt Utility\";\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#201f1f\";\n      showAlert(\"Drak mode has been enabled\", \"dark\");\n      // document.title = \"TExt-Utils | Dark Mode\";\n    }\n  };\n  return (\n    <>\n    <Router>\n      <Navbar\n        title=\"TExt-Utils\"\n        aboutText=\"About\"\n        mode={mode}\n        toggleMode={toggleMode}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Switch>\n          <Route exact path=\"/about\"><About mode ={mode} /></Route>\n          <Route exact path=\"/\"> <TextForm showAlert={showAlert} heading=\"TextUtils - Word Counter,  Character Counter,  Remove Extra Spaces\" mode={mode}/>  </Route> \n        </Switch>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}